FROM mcr.microsoft.com/windows/servercore:ltsc2022 as windows

SHELL ["cmd", "/S", "/C"]

####################
#### Install VS ####
####################
RUN mkdir C:\TEMP
RUN powershell Invoke-WebRequest https://aka.ms/vs/17/release/channel -OutFile C:/TEMP/VisualStudio.chman
RUN powershell Invoke-WebRequest https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile C:/TEMP/vs_buildtools.exe

# https://docs.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2019
# When installing Visual Studio, we need Desktop development with C++ components.
# For that we need to add: Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core
# Info on individual components:
# https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2019
RUN C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache \
    --channelUri C:\TEMP\VisualStudio.chman \
    --installChannelUri C:\TEMP\VisualStudio.chman \
    --add Microsoft.VisualStudio.Component.Windows10SDK.19041 \
    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \
    --add Microsoft.VisualStudio.Component.VC.CMake.Project \
    --add Microsoft.VisualStudio.Component.VC.ATLMFC \
    --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core \
    --add Microsoft.VisualStudio.Workload.NativeDesktop \
    --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools \
    --add Microsoft.VisualStudio.Workload.VCTools \
    --add Microsoft.VisualStudio.Component.VC.CLI.Support \
    --installPath C:\BuildTools \
     || IF "%ERRORLEVEL%"=="3010" EXIT 0

######################
#### Install Rust ####
######################
RUN powershell Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe -OutFile C:/TEMP/rustup-init.exe
RUN powershell -Command C:\TEMP\rustup-init.exe -y

#####################
#### Install Git ####
#####################
RUN powershell Invoke-WebRequest https://github.com/git-for-windows/git/releases/download/v2.49.0.windows.1/MinGit-2.49.0-64-bit.zip -OutFile C:/TEMP/MinGit.zip
RUN powershell -Command Expand-Archive c:\TEMP\MinGit.zip -DestinationPath c:\MinGit
RUN setx /M path "C:\MinGit\cmd;%path%"

#########################
#### Install Flutter ####
#########################
RUN git clone --filter=tree:0 -b 3.29.3 https://github.com/flutter/flutter.git C:\flutter
RUN setx /M path "C:\flutter\bin;C:\flutter\bin\cache\dart-sdk\bin;%path%"

# Git doesn't like directories with dubious ownership, it's OK in a container
# https://nvd.nist.gov/vuln/detail/CVE-2022-24765
RUN git config --global --add safe.directory C:/flutter

RUN dart --disable-analytics
RUN flutter config --no-analytics
RUN flutter config --enable-windows-desktop
RUN flutter precache --windows
RUN flutter doctor -v 

#######################
#### Install MSYS2 ####
#######################
RUN powershell -Command [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
  Invoke-WebRequest -UseBasicParsing -uri \
  "https://github.com/msys2/msys2-installer/releases/download/nightly-x86_64/msys2-base-x86_64-latest.sfx.exe" \
  -OutFile msys2.exe; \
  .\msys2.exe -y -oC:\; \
  Remove-Item msys2.exe ;

RUN setx /M path "C:\msys64\usr\bin;C:\msys64\mingw64\bin;%path%"

#######################
##### Install Inno ####
#######################
RUN powershell Invoke-WebRequest https://files.jrsoftware.org/is/6/innosetup-6.4.3.exe -OutFile C:/TEMP/innosetup.exe
# https://jrsoftware.org/ishelp/index.php?topic=setupcmdline
RUN C:/TEMP/innosetup.exe /SP- /VERYSILENT /ALLUSERS /SUPPRESSMSGBOXES

#######################
#### Install SSHD #####
#######################
# Windows containers running with Hyper-V don't support `docker cp` on
# _running_ containers. So we use ssh for getting the artifacts back to host.
# Alternative would be to stop the container before `docker cp` but given that
# the container contains secrets, we want it to be ephemeral and we start it
# with the `--rm` argument.

# Add local user "ssh" with password "Passw0rd", note that the password access is removed
# below.
RUN cmd /C net USER ssh "Passw0rd" /ADD && net localgroup "Administrators" "ssh" /ADD

# Switch to using powershell.
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install the OpenSSH server
RUN New-ItemProperty -Path "HKLM:\SOFTWARE\OpenSSH" -Name DefaultShell -Value "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -PropertyType String -Force

# Setup permissions for authorized_keys file
RUN New-Item c:/ProgramData/ssh/administrators_authorized_keys -type file; \
    icacls.exe c:/ProgramData/ssh/administrators_authorized_keys /inheritance:r /grant Administrators:F /grant SYSTEM:F

# Start the sshd service, this creates the C:\ProgramData\ssh\sshd_config file
# which we'll need for the next step
RUN Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0; \
    Start-Service sshd;

# Disallow connections using login:password credentials and stop sshd
RUN (Get-Content c:\ProgramData\ssh\sshd_config).Replace('#PasswordAuthentication yes', 'PasswordAuthentication no') \
    |Set-Content c:\ProgramData\ssh\sshd_config; \
    Stop-Service sshd

# Expose port 22 for SSH
EXPOSE 22
