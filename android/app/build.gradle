import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id "com.starter.easylauncher" version "6.4.0"
    id "com.diffplug.spotless" version "7.0.2"
}

def localProperties = new Properties()
rootProject.file("local.properties").withInputStream { localProperties.load(it) }

android {
    namespace = "org.equalitie.ouisync"

    compileSdk = 35
    ndkVersion = '27.2.12479018'

    kotlin {
        jvmToolchain(17)
    }

    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }

    def keystoreProperties = loadKeystorePropertiesFile(System.getenv('STORE_FILE') ?: localProperties['STORE_FILE'])

    defaultConfig {
        def appId = "org.equalitie.ouisync"

        applicationId = appId
        resValue "string", "app_name", "Ouisync"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        multiDexEnabled = true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties?.keyAlias
            keyPassword keystoreProperties?.keyPassword
            storeFile keystoreProperties?.storeFile
            storePassword keystoreProperties?.storePassword
        }
    }

    flavorDimensions "releaseType"
    productFlavors {
        production {
            dimension "releaseType"
        }
        nightly {
            dimension "releaseType"
            applicationIdSuffix ".nightly"
            resValue "string", "app_name", "Ouisync nightly"
        }
        unofficial {
            dimension "releaseType"
            applicationIdSuffix ".unofficial"
            resValue "string", "app_name", "Ouisync unofficial"
        }
        itest {
            dimension "releaseType"
            applicationIdSuffix ".itest"
            resValue "string", "app_name", "Ouisync integration test"
        }
    }

    buildTypes {
        release {
            if (keystoreProperties != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }

            proguardFiles(
                getDefaultProguardFile('proguard-android-optimize.txt'),
                'proguard-rules.pro',
            )
        }
    }
}


// Generate launcher icons by invoking [icons_launcher](https://pub.dev/packages/icons_launcher)
def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
tasks.register("generateLauncherIcons", Exec) {
    workingDir "${project.rootDir}/.."
    // TODO: This generates icons for all platforms. Ideally we would restrict it to generate them
    // only for android (and set it up separately in other platforms' respective build systems).
    if (isWindows) {
       commandLine 'cmd.exe', '/c', 'dart', 'run', 'icons_launcher:create'
    } else {
        commandLine 'dart', 'run', 'icons_launcher:create'
    }
}

afterEvaluate {
    android.applicationVariants.each { variant ->
        tasks.named("generate${variant.name.capitalize()}Assets") {
            dependsOn "generateLauncherIcons"
        }
    }

    // Flutter building will exit with an incomprehensive error if the flavor is not specified. So
    // we do our own check if the --flavor parameter was used and tell the user that it needs to be
    // set if it's not.
    //
    // NOTE: We are injecting this check into the `preBuild` task which is (one of) the first tasks
    // run during a build so that this check happens as soon as possible. Also this way it doesn't
    // interfere with any non-build tasks (e.g. `clean` or `tasks`, ...).
    tasks.named("preBuild") {
        doFirst {
            android.buildTypes.each { buildType ->
                def unflavoredTaskName = "assemble${buildType.name.capitalize()}"

                gradle.startParameter.taskNames.each { taskName ->
                    if (taskName == unflavoredTaskName) {
                        def flavors = android.productFlavors.collect { it.name }
                        throw new GradleException("Missing '--flavor=${flavors.join('|')}' argument.")
                    }
                }
            }
        }
    }
}

flutter {
   source = "../.."
}

easylauncher {
    defaultFlavorNaming true

    productFlavors {
        production {
            enable false
        }

        nightly {
            filters = [
                customRibbon(position: "topRight", ribbonColor: "#FFE65100")
            ]
        }

        unofficial {
            filters = [
                customRibbon(position: "topRight", ribbonColor: "#FF0D47A1")
            ]
        }
    }
}

spotless {
    kotlin {
        target("**/*.kt")
        ktfmt()
        ktlint()
    }
}

class SigningConfig {
    String keyAlias
    String keyPassword
    File storeFile
    String storePassword
}

def loadKeystorePropertiesFile(String keystorePropertiesPath) {
    if (keystorePropertiesPath == null) {
        return null;
    }
    def properties = new Properties()

    def propFile = rootProject.file(keystorePropertiesPath)

    if (!propFile.exists()) {
        throw new GradleException("The keystore properties file does not exist: ${keystorePropertiesPath}");
    }

    propFile.withInputStream { properties.load(it) }

    def storeFile = file(properties['storeFile']);

    if (!storeFile.exists()) {
        throw new GradleException("The store file does not exist: ${storeFile.getPath()}");
    }

    def config = new SigningConfig(
        keyAlias: properties['keyAlias'],
        keyPassword: properties['keyPassword'],
        storeFile: file(properties['storeFile']),
        storePassword: properties['storePassword']
    )

    return config
}

def appendUnlessNull(String s1, String s2) {
    if (s2 == null) {
        return s1
    }
    return s1 + s2
}
